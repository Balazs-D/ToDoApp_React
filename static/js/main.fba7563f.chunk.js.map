{"version":3,"sources":["components/Item.js","components/Todo.js","components/App.js","serviceWorker.js","index.js"],"names":["Item","props","items","map","i","id","key","Todo","handleChange","event","console","log","target","value","setState","newItem","preventDefault","handleSubmit","state","trim","prevState","concat","this","onSubmit","placeholder","onChange","type","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAEe,SAASA,EAAKC,GAEzB,OACI,4BACKA,EAAMC,MAAMC,KAAI,SAACC,EAAGC,GAAJ,OAAW,wBAAIC,IAAKD,GAAKD,O,ICHjCG,E,YACnB,WAAYN,GAAQ,IAAD,8BACjB,4CAAMA,KAORO,aAAe,SAAAC,GACbC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CACZC,QAASN,EAAMG,OAAOC,QAGxBJ,EAAMO,kBAdW,EAiBnBC,aAAe,SAAAR,GACbA,EAAMO,iBAEN,IAAMD,EAAU,EAAKG,MAAMH,QAAQI,OACpB,KAAZJ,GACH,EAAKD,UAAS,SAAAM,GAAS,MAAK,CACxBlB,MAAOkB,EAAUlB,MAAMmB,OAAON,GAC9BA,QAAQ,QAtBZ,EAAKG,MAAQ,CACXH,QAAS,GACTb,MAAO,IAJQ,E,sEA6BjB,OACE,yBAAKG,GAAG,YACN,kBAACL,EAAD,CAAME,MAAOoB,KAAKJ,MAAMhB,QAExB,0BAAMqB,SAAUD,KAAKL,cACnB,2BAAOO,YAAY,qBACjBC,SAAUH,KAAKd,aACfkB,KAAK,OACLrB,GAAG,YACHQ,MAAOS,KAAKJ,MAAMH,UAEpB,6C,GAzCwBY,aCYnBC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,qCACA,kBAAC,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.fba7563f.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Item(props) {\n    \n    return (\n        <ul>\n            {props.items.map((i, id )=> <li key={id}>{i}</li>)}       \n        </ul>\n    )\n}\n","import React, { Component } from 'react';\nimport Item from './Item';\n\nexport default class Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newItem: '',\n      items: []\n    };\n  }\n\n  handleChange = event => {\n    console.log(event.target.value);\n    this.setState({\n      newItem: event.target.value\n    });\n\n    event.preventDefault();\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const newItem = this.state.newItem.trim()\n    if(newItem !== \"\")\n    this.setState(prevState => ({\n        items: prevState.items.concat(newItem),\n        newItem:\"\"\n    }))\n  };\n\n  render() {\n    return (\n      <div id=\"main-div\">\n        <Item items={this.state.items}/>\n\n        <form onSubmit={this.handleSubmit}>\n          <input placeholder=\"Type something ...\"\n            onChange={this.handleChange}\n            type=\"text\"\n            id=\"todo-item\"\n            value={this.state.newItem}\n          ></input>\n          <button>Add</button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport '../styles/App.css';\nimport Todo from './Todo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>TO DO</h1>\n        <Todo />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}